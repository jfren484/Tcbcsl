@model GameResultsEditModel
@{
    var title = $"Game Result - {Model.GameDate.ToString(Consts.DateFormatDisplay)}";
    ViewBag.Title = title;
}
<style>
    .row.header {
        text-align: center;
        font-weight: bold;
    }

    .game-report, .arrow:after {
        background-color: #f5f5f5;
        border: solid 1px #e3e3e3;
    }

    .game-report {
        border-radius: 8px;
        margin-top: 15px;
        margin-bottom: 5px;
    }

    .game-report-row {
        padding: 5px;
    }

    .game-report-col {
        text-align: center;
        border-bottom: solid 1px #e3e3e3;
    }

    .game-report-submitted-by {
        font-size: 0.8em;
    }

    .game-report-roadteam .arrow {
        left: 20px;
    }

    .game-report-league .arrow {
        left: 50%;
        margin-left: -35px;
    }

    .game-report-hometeam .arrow {
        right: 20px;
    }

    .arrow {
        width: 70px;
        height: 16px;
        overflow: hidden;
        position: absolute;
        top: -16px;
    }
    .arrow:after {
        content: "";
        position: absolute;
        left: 20px;
        bottom: -20px;
        width: 25px;
        height: 25px;
        -webkit-transform: rotate(45deg);
        -moz-transform:    rotate(45deg);
        -ms-transform:     rotate(45deg);
        -o-transform:      rotate(45deg);
    }
</style>
<div class="row header">
    <div class="hidden-xs col-sm-4                 col-md-3 col-md-offset-2 col-lg-2 col-lg-offset-3">@Html.LabelFor(m => m.RoadTeam)</div>
    <div class="hidden-xs col-sm-4 col-sm-offset-4 col-md-3 col-md-offset-2 col-lg-2 col-lg-offset-2">@Html.LabelFor(m => m.HomeTeam)</div>
</div>
<div class="row header">
    <div class="col-xs-12 col-sm-4               col-md-3 col-md-offset-2 col-lg-2 col-lg-offset-3">@Model.RoadTeam.FullName</div>
    <div class="col-xs-12 col-sm-4 col-sm-push-4 col-md-3 col-md-push-2   col-lg-2 col-lg-push-2"><span class="visible-xs-inline">@@ </span>@Model.HomeTeam.FullName</div>
    <div class="col-xs-12 col-sm-4 col-sm-pull-4 col-md-2 col-md-pull-3   col-lg-2 col-lg-pull-2">@Model.GameDate.ToString(Consts.GameDateTimeFormat)</div>
</div>
@foreach (var report in Model.ResultReports.OrderBy(r => r.ReportDate))
{
    <div class="row">
        <div class="game-report game-report-@(report.SubmittedFrom.ToString().ToLower()) @(report.IsConfirmation ? "game-report-confirmation" : "")
                    col-sm-12 col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3">
            <div class="game-report-row row">
                @if (!report.IsConfirmation)
                {
                    <div class="game-report-col col-sm-4">@report.RoadTeamScore</div>
                    <div class="game-report-col col-sm-4">@report.GameStatus</div>
                    <div class="game-report-col col-sm-4">@report.HomeTeamScore</div>
                }
                @if (!string.IsNullOrWhiteSpace(report.Note))
                {
                    <div class="game-report-col col-sm-12">@report.Note</div>
                }
                <div class="game-report-submitted-by col-sm-12">
                    @(report.IsConfirmation ? "Confirmed" : "Submitted") by: @report.UserFullName
                    <span style="float: right;">@report.ReportDate.ToString(Consts.DateTimeFormatDisplay)</span>
                </div>
            </div>
            <div class="arrow"></div>
        </div>
    </div>
}
@Html.EditorFor(m => m.NewReport, new {NoteOnly = Model.IsFinalized})
@section scripts
{
    <script>
        $(function () {
            $.validator.addMethod('forfeit-score', function (value, element) {
                if ($('select[name$=".GameStatusId"').val() != '@Tcbcsl.Data.Entities.GameStatus.Forfeited') return true;

                var otherValue = $('input[name$=".RunsScored"]').not('#' + element.id).val();

                // The other value is valid - make sure this one is appropriate.
                if (otherValue === '0') return value === '15';
                if (otherValue === '15') return value === '0';

                // The other value was not valid, so validate this value on its own.
                return value === '0' || value === '15';
            }, 'The score of a forfeit must be 15 - 0.');

            $.validator.addMethod('result-scheduled-with-score', function (value, element) {
                if (value != '@Tcbcsl.Data.Entities.GameStatus.Scheduled') return true;

                var nonZeroScoreValues = $('input[name$=".RunsScored"]').not('[value="0"]').length;

                // If any scores were not zero, this status is invalid.
                return nonZeroScoreValues == 0;
            }, 'The Result of the game should be set to Final.');

            $.validator.addMethod('result-missed-with-score', function (value, element) {
                if (value != '@Tcbcsl.Data.Entities.GameStatus.Postponed' &&
                    value != '@Tcbcsl.Data.Entities.GameStatus.RainedOut') return true;

                var nonZeroScoreValues = $('input[name$=".RunsScored"]').not('[value="0"]').length;

                // If any scores were not zero, this status is invalid.
                return nonZeroScoreValues == 0;
            }, 'Results of Postponed or Rained Out are invalid for games with a score.');
        });
    </script>
}
