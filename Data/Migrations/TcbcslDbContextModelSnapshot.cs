// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tcbcsl.Data;

namespace Tcbcsl.Data.Migrations
{
    [DbContext(typeof(TcbcslDbContext))]
    partial class TcbcslDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<int?>("StateId");

                    b.Property<string>("Street1")
                        .HasMaxLength(100);

                    b.Property<string>("Street2")
                        .HasMaxLength(100);

                    b.Property<string>("Zip")
                        .HasMaxLength(10);

                    b.HasKey("AddressId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StateId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Church", b =>
                {
                    b.Property<int>("ChurchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Information");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<string>("Website")
                        .HasMaxLength(1000);

                    b.HasKey("ChurchId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Churches");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Coach", b =>
                {
                    b.Property<int>("CoachId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.HasKey("CoachId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Conference", b =>
                {
                    b.Property<int>("ConferenceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.HasKey("ConferenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.ConferenceYear", b =>
                {
                    b.Property<int>("ConferenceYearId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConferenceId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsInLeague");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Sort");

                    b.Property<int>("Year");

                    b.HasKey("ConferenceYearId");

                    b.HasIndex("ConferenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ConferenceYears");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.ContactPhoneNumber", b =>
                {
                    b.Property<int>("ContactPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChurchId");

                    b.Property<int?>("CoachId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("PhoneNumberTypeId");

                    b.HasKey("ContactPhoneNumberId");

                    b.HasIndex("ChurchId");

                    b.HasIndex("CoachId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("ContactPhoneNumbers");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.HasKey("DivisionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.DivisionYear", b =>
                {
                    b.Property<int>("DivisionYearId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConferenceYearId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("DivisionId");

                    b.Property<bool>("IsInLeague");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("Sort");

                    b.Property<int>("Year");

                    b.HasKey("DivisionYearId");

                    b.HasIndex("ConferenceYearId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DivisionId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("DivisionYears");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("GameDate");

                    b.Property<int>("GameStatusId");

                    b.Property<int>("GameTypeId");

                    b.Property<bool>("IsFinalized");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.HasKey("GameId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.GameParticipant", b =>
                {
                    b.Property<int>("GameParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("GameId");

                    b.Property<bool>("IsHost");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<int>("RunsScored");

                    b.Property<int>("TeamYearId");

                    b.HasKey("GameParticipantId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GameId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TeamYearId");

                    b.ToTable("GameParticipants");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.GameResultReport", b =>
                {
                    b.Property<int>("GameResultReportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("GameId");

                    b.Property<int?>("GameStatusId");

                    b.Property<int?>("HomeTeamScore");

                    b.Property<bool>("IsConfirmation");

                    b.Property<string>("Note");

                    b.Property<int?>("RoadTeamScore");

                    b.Property<int?>("TeamId");

                    b.HasKey("GameResultReportId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GameId");

                    b.HasIndex("GameStatusId");

                    b.HasIndex("TeamId");

                    b.ToTable("GameResultReports");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.GameStatus", b =>
                {
                    b.Property<int>("GameStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowStatistics");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("DisplayOutcome");

                    b.Property<bool>("IsComplete");

                    b.HasKey("GameStatusId");

                    b.ToTable("GameStatuses");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.GameTournamentDate", b =>
                {
                    b.Property<int>("GameTournamentDateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("GameDate");

                    b.HasKey("GameTournamentDateId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("GameTournamentDates");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.GameType", b =>
                {
                    b.Property<int>("GameTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("RecordGame");

                    b.HasKey("GameTypeId");

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.NewsItem", b =>
                {
                    b.Property<int>("NewsItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Subject")
                        .HasMaxLength(255);

                    b.Property<int?>("TeamId");

                    b.HasKey("NewsItemId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("NewsItems");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.PageContent", b =>
                {
                    b.Property<int>("PageContentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<string>("PageTag")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PageContentId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("PageContents");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.PhoneNumberType", b =>
                {
                    b.Property<int>("PhoneNumberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PhoneNumberTypeId");

                    b.ToTable("PhoneNumberTypes");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("CurrentTeamId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.HasKey("PlayerId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CurrentTeamId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.StatLine", b =>
                {
                    b.Property<int>("StatLineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BattingOrderPosition");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("GameParticipantId");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<int>("PlayerId");

                    b.Property<int>("StatAtBats")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("StatSingles + StatDoubles + StatTriples + StatHomeRuns + StatOuts + StatFieldersChoices + StatReachedByErrors");

                    b.Property<int>("StatDoubles");

                    b.Property<int>("StatFieldersChoices");

                    b.Property<int>("StatHits")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("StatSingles + StatDoubles + StatTriples + StatHomeRuns");

                    b.Property<int>("StatHomeRuns");

                    b.Property<int>("StatOuts");

                    b.Property<int>("StatPlateAppearances")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("StatSingles + StatDoubles + StatTriples + StatHomeRuns + StatOuts + StatFieldersChoices + StatReachedByErrors + StatWalks + StatSacrificeFlies");

                    b.Property<int>("StatReachedByErrors");

                    b.Property<int>("StatRuns");

                    b.Property<int>("StatRunsBattedIn");

                    b.Property<int>("StatSacrificeFlies");

                    b.Property<int>("StatSingles");

                    b.Property<int>("StatStrikeouts");

                    b.Property<int>("StatTotalBases")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("StatSingles + StatDoubles * 2 + StatTriples * 3 + StatHomeRuns * 4");

                    b.Property<int>("StatTriples");

                    b.Property<int>("StatWalks");

                    b.HasKey("StatLineId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GameParticipantId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PlayerId");

                    b.ToTable("StatLines");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.TcbcslUserTeam", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("TeamId");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TcbcslUserTeams");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("FieldInformation");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.HasKey("TeamId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.TeamYear", b =>
                {
                    b.Property<int>("TeamYearId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChurchId");

                    b.Property<string>("Clinch")
                        .HasMaxLength(5);

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("DivisionYearId");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(151);

                    b.Property<bool>("HasPaid");

                    b.Property<int>("HeadCoachId");

                    b.Property<bool>("KeepsStats");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<int>("TeamId");

                    b.Property<string>("TeamName")
                        .HasMaxLength(50);

                    b.Property<int>("Year");

                    b.HasKey("TeamYearId");

                    b.HasIndex("ChurchId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DivisionYearId");

                    b.HasIndex("HeadCoachId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamYears");
                });

            modelBuilder.Entity("Tcbcsl.Data.Identity.TcbcslUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Address", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("Tcbcsl.Data.Entities.State", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Church", b =>
                {
                    b.HasOne("Tcbcsl.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Coach", b =>
                {
                    b.HasOne("Tcbcsl.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Conference", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.ConferenceYear", b =>
                {
                    b.HasOne("Tcbcsl.Data.Entities.Conference", "Conference")
                        .WithMany("ConferenceYears")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.ContactPhoneNumber", b =>
                {
                    b.HasOne("Tcbcsl.Data.Entities.Church", "Church")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ChurchId");

                    b.HasOne("Tcbcsl.Data.Entities.Coach", "Coach")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("CoachId");

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("Tcbcsl.Data.Entities.PhoneNumberType", "PhoneNumberType")
                        .WithMany()
                        .HasForeignKey("PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Division", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.DivisionYear", b =>
                {
                    b.HasOne("Tcbcsl.Data.Entities.ConferenceYear", "ConferenceYear")
                        .WithMany("DivisionYears")
                        .HasForeignKey("ConferenceYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Entities.Division", "Division")
                        .WithMany("DivisionYears")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Game", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Entities.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Entities.GameType", "GameType")
                        .WithMany()
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.GameParticipant", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Entities.Game", "Game")
                        .WithMany("GameParticipants")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("Tcbcsl.Data.Entities.TeamYear", "TeamYear")
                        .WithMany("GameParticipants")
                        .HasForeignKey("TeamYearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.GameResultReport", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Entities.Game", "Game")
                        .WithMany("GameResultReports")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Entities.GameStatus", "GameStatus")
                        .WithMany()
                        .HasForeignKey("GameStatusId");

                    b.HasOne("Tcbcsl.Data.Entities.Team", "Team")
                        .WithMany("GameResultReports")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.GameTournamentDate", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.NewsItem", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("Tcbcsl.Data.Entities.Team", "Team")
                        .WithMany("NewsItems")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.PageContent", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Player", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Entities.Team", "CurrentTeam")
                        .WithMany("Players")
                        .HasForeignKey("CurrentTeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.StatLine", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Entities.GameParticipant", "GameParticipant")
                        .WithMany("StatLines")
                        .HasForeignKey("GameParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("Tcbcsl.Data.Entities.Player", "Player")
                        .WithMany("StatLines")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.TcbcslUserTeam", b =>
                {
                    b.HasOne("Tcbcsl.Data.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "User")
                        .WithMany("TcbcslUserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.Team", b =>
                {
                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");
                });

            modelBuilder.Entity("Tcbcsl.Data.Entities.TeamYear", b =>
                {
                    b.HasOne("Tcbcsl.Data.Entities.Church", "Church")
                        .WithMany("TeamYears")
                        .HasForeignKey("ChurchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Entities.DivisionYear", "DivisionYear")
                        .WithMany("TeamYears")
                        .HasForeignKey("DivisionYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Entities.Coach", "HeadCoach")
                        .WithMany("TeamYears")
                        .HasForeignKey("HeadCoachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tcbcsl.Data.Identity.TcbcslUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("Tcbcsl.Data.Entities.Team", "Team")
                        .WithMany("TeamYears")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
